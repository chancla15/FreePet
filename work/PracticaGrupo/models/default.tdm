ConceptualModel default 
{ 
	Class User
	{
		attributes
		{
			private oid DNI:String;
			private name:String;
			private surname:String;
			private password:String;
			private address:String;
			private phone:Integer;
		}
		operations
		{
			public leerUsuarioPorOID::ReadOID (p_oid : OID -> User) : Object -> User;
			public logarse::Custom(p_NIF : String, p_Password : String) : Boolean;
		}
	};
	
	Class Cliente extends User
	{
		operations
		{
			public crear::New (p_DNI : String, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Object->Cliente;
			public modificar::Modifier (p_oid : OID -> Cliente, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Void;
			public borrar::Destroy (p_oid : OID -> Cliente) : Void;
			public AnyadirAnimal::Relationer->ClienteAnimal.animal (p_cliente : OID -> Cliente, p_animal : OID -> Animal) : Void;
			public QuitarAnimal::Unrelationer->ClienteAnimal.animal (p_cliente : OID -> Cliente, p_animal : OID -> Animal) : Void;
		}
	};
	
	Class Employer extends User
	{
		attributes
		{
			private identifier:String;
		}
	};
	
	Class Recepcionist extends Employer
	{
		operations
		{
			public crear::New (p_identifier : String, p_DNI : String, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Object->Recepcionist;
			public modificar::Modifier (p_oid : OID -> Recepcionist, p_identifier : String, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Void;
			public borrar::Destroy (p_oid : OID -> Recepcionist) : Void;
		}
	};
	
	Class Veterinario extends Employer
	{
		attributes
		{
			private num_colegiado:Integer;
		}
		operations
		{
			public crear::New (p_num_colegiado : Integer, p_identifier : String, p_DNI : String, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Object->Veterinario;
			public modificar::Modifier (p_oid : OID -> Veterinario, p_num_colegiado : Integer, p_identifier : String, p_name : String, p_surname : String, p_password : String, p_address : String, p_phone : Integer) : Void;
			public borrar::Destroy (p_oid : OID -> Veterinario) : Void;
		}
	};
	
	Enumeration RazaAnimal
	{
		("Perro",1), ("Gato",2), ("Pajaro",3), ("Pez", 4), ("Reptil",5)
	};
	
	Enumeration TamanyoAnimal
	{
		("Pequeño",1), ("PequeñoMedio",2), ("Normal",3), ("NormalGrande",4), ("Grande",5)
	};
	
	
	Association ClienteAnimal ( Cliente - Animal )
	{
		=> navigable animal: Composite ( "1", "1");
		<= navigable cliente ( "0", "*");
	};
	
	
	Class Animal
	{
		attributes
		{
			private oid microchip:String;
			private name:String;
			private raza:RazaAnimal;
			private tamanyo:TamanyoAnimal;
			private peso:Double;
			private fechanac:Date;
			private sexo:Character;
		}
		
		operations
		{
			public crear::New (p_microchip : String, p_name : String, p_raza : RazaAnimal, p_tamanyo : TamanyoAnimal, p_peso : Double, p_fechanac : Date, p_sexo : Character) : Object->Animal;
			public modificar::Modifier (p_oid : OID -> Animal, p_name : String, p_raza : RazaAnimal, p_tamanyo : TamanyoAnimal, p_peso : Double, p_fechanac : Date, p_sexo : Character) : Void;
			public borrar::Destroy (p_oid : OID -> Animal) : Void;
			public leerAnimalPorOID::ReadOID (p_oid : OID -> Animal) : Object -> Animal;
		}
	};
	
	
}